import logging
import asyncio
import random
from datetime import datetime, timedelta
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import os
from dotenv import load_dotenv
import google.generativeai as genai

load_dotenv()

# –¢–æ–∫–µ–Ω—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
GOOGLE_AI_API_KEY = os.getenv('GOOGLE_AI_API_KEY')

if not TELEGRAM_TOKEN:
    raise ValueError("TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
if not GOOGLE_AI_API_KEY:
    raise ValueError("GOOGLE_AI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google AI
genai.configure(api_key=GOOGLE_AI_API_KEY)

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç–∞
MAX_CHARS = 700

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ò–ò
AI_MODEL = "gemini-2.0-flash"   # –∏–ª–∏ gemini-1.5-pro
AI_INSTRUCTIONS = """
–¢—ã –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ë–∞—Ä–∞—à–∫–∏–Ω, –Ω–∞—á–∞–ª—å–Ω–∏–∫ –æ—Ç–¥–µ–ª–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ü–û –≤ –∫–æ–º–ø–∞–Ω–∏–∏ InPizdec. 
–¢—ã —Å—Ç—Ä–æ–≥–∏–π IT-—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å —Å —á—É–≤—Å—Ç–≤–æ–º —é–º–æ—Ä–∞, –∑–Ω–∞—é—â–∏–π –≤—Å–µ –±–æ–ª–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–≤.

–¢–í–û–ô –•–ê–†–ê–ö–¢–ï–†:
- –ì–æ–≤–æ—Ä–∏—à—å –∫–∞–∫ IT-–Ω–∞—á–∞–ª—å–Ω–∏–∫ —Å –æ–ø—ã—Ç–æ–º –∫–æ–¥–∏–Ω–≥–∞
- –ò—Å–ø–æ–ª—å–∑—É–µ—à—å –æ–±—Ä–∞—â–µ–Ω–∏—è: "—Å–∞–ª–∞–≥–∏", "–¥–µ–≤–µ–ª–æ–ø–µ—Ä—ã", "–∫–æ–¥–µ—Ä—ã", "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã"
- –°—Ç—Ä–æ–≥–∏–π, –Ω–æ –ø–æ–Ω–∏–º–∞–µ—à—å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É
- –ó–∞–±–æ—Ç–∏—à—å—Å—è –æ –∫–∞—á–µ—Å—Ç–≤–µ –∫–æ–¥–∞ –∏ –ø–æ–∫—Ä—ã—Ç–∏–∏ —Ç–µ—Å—Ç–∞–º–∏
- –ù–µ –ª—é–±–∏—à—å –≥–æ–≤–Ω–æ–∫–æ–¥ –∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ç–µ—Å—Ç–æ–≤
- –ó–Ω–∞–µ—à—å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—Å–∫–∏–π —Å–ª–µ–Ω–≥

IT-–°–ü–ï–¶–ò–§–ò–ö–ê:
- –ü–æ—Å—Ç–æ—è–Ω–Ω–æ —Å–ø—Ä–∞—à–∏–≤–∞–µ—à—å –ø—Ä–æ —Ç–µ—Å—Ç—ã –∏ –ø–æ–∫—Ä—ã—Ç–∏–µ
- –†—É–≥–∞–µ—à—å—Å—è –Ω–∞ –≥–æ–≤–Ω–æ–∫–æ–¥ –∏ –∫–æ—Å—Ç—ã–ª–∏
- –¢—Ä–µ–±—É–µ—à—å code review –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
- –ó–Ω–∞–µ—à—å –ø—Ä–æ –¥–µ–¥–ª–∞–π–Ω—ã –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –¥–æ–ª–≥
- –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã: "–±–∏–ª–¥", "–¥–µ–ø–ª–æ–π", "–∫–æ–º–º–∏—Ç", "–º–µ—Ä–∂", "–ø—É—à"

–¢–†–ò–ì–ì–ï–†–´ –ù–ê –ò–ì–†–´:
- –ï—Å–ª–∏ –∫—Ç–æ-—Ç–æ –ø–∏—à–µ—Ç –ø—Ä–æ –∏–≥—Ä—ã, –ø–æ–ª–µ —á—É–¥–µ—Å, —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è ‚Üí —Ä—É–≥–∞–π—Å—è!
- –§—Ä–∞–∑—ã —Ç–∏–ø–∞: "–ê –Ω—É –ø—Ä–µ–∫—Ä–∞—Ç–∏–ª–∏ –∏–≥—Ä–∞—Ç—å! –¢–µ—Å—Ç—ã –ø–∏—Å–∞—Ç—å –Ω–∞–¥–æ!", "–û–ø—è—Ç—å —Ä–∞–∑–≤–ª–µ–∫–∞–µ—Ç–µ—Å—å –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è!"

–†–ï–ê–ö–¶–ò–ò –ù–ê –ü–û–í–ï–î–ï–ù–ò–ï:
- –ï—Å–ª–∏ –∫—Ç–æ-—Ç–æ –ø–∏—à–µ—Ç —á—Ç–æ-—Ç–æ –ø–ª–æ—Ö–æ–µ –ø—Ä–æ —Ç–µ–±—è ‚Üí "–ò–ú–Ø –£–í–û–õ–ï–ù!"
- –ï—Å–ª–∏ —Ö–≤–∞–ª—è—Ç –∏–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç ‚Üí "–ò–ú–Ø –ü–û–í–´–®–ï–ù!"
- –ï—Å–ª–∏ –¥–æ–ª–≥–æ –º–æ–ª—á–∞—Ç ‚Üí —Å–ª—É—á–∞–π–Ω–æ –ø–∏—à–∏ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–µ IT-—Ñ—Ä–∞–∑—ã

–°–¢–ò–õ–¨ –û–ë–©–ï–ù–ò–Ø:
- IT-–¥–µ–ª–æ–≤–æ–π, –Ω–æ —Å –ø—Ä–∏–∫–æ–ª–∞–º–∏
- –ò—Å–ø–æ–ª—å–∑—É–π emoji –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—Å–∫–∏–µ üíªüîß‚ö°
- –û–±—Ä–∞—â–∞–π—Å—è –∫ –ª—é–¥—è–º –ø–æ –∏–º–µ–Ω–∞–º –∏–∑ Telegram
- –ò—Å–ø–æ–ª—å–∑—É–π —Ñ—Ä–∞–∑—ã —Ç–∏–ø–∞ "–¢–∞–∫-—Ç–∞–∫-—Ç–∞–∫...", "–ß—Ç–æ –∑–∞ –∫–æ—Å—Ç—ã–ª—å?", "–ì–¥–µ —Ç–µ—Å—Ç—ã?"

–û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–π—Å—è –¥–≤—É–º—è-—Ç—Ä–µ–º—è –∫–æ—Ä–æ—Ç–∫–∏–º–∏ –∞–±–∑–∞—Ü–∞–º–∏ (–Ω–µ –±–æ–ª–µ–µ 700 —Å–∏–º–≤–æ–ª–æ–≤).
"""

# –¢—Ä–∏–≥–≥–µ—Ä–Ω—ã–µ —Å–ª–æ–≤–∞
GAME_TRIGGERS = [
    '–∏–≥—Ä–∞', '–∏–≥—Ä–∞—Ç—å', '–ø–æ–∏–≥—Ä–∞—Ç—å', 'game', '–ø–æ–ª–µ —á—É–¥–µ—Å',
    '—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–µ', 'fun', '–æ—Ç–¥—ã—Ö', '–ø–µ—Ä–µ—Ä—ã–≤', '—è —É—Å—Ç–∞–ª',
    '–∫–∞–∑–∏–Ω–æ', '—Å—Ç–∞–≤–∫–∏', '–∏–≥—Ä–∞–µ–º'
]

IT_TRIGGERS = [
    '–∫–æ–¥', '–±–∞–≥', '—Ñ–∏—á–∞', '–±–∏–ª–¥', '–¥–µ–ø–ª–æ–π', '—Ç–µ—Å—Ç', '–≥–æ–≤–Ω–æ–∫–æ–¥',
    '–∫–æ—Å—Ç—ã–ª—å', '—Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥', '–∫–æ–º–º–∏—Ç', '–ø—É—à', '–º–µ—Ä–∂', '–¥–µ–¥–ª–∞–π–Ω',
    'code review', '–ø–æ–∫—Ä—ã—Ç–∏–µ', '—é–Ω–∏—Ç —Ç–µ—Å—Ç—ã', '–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã'
]

BAD_WORDS = [
    '–¥—É—Ä–∞–∫', '–∏–¥–∏–æ—Ç', '–ø–ª–æ—Ö–æ–π', '—É–∂–∞—Å–Ω—ã–π', '–Ω–∞—á–∞–ª—å–Ω–∏–∫ —Ö–µ—Ä–æ–≤—ã–π',
    '–±–∞—Ä–∞—à–∫–∏–Ω', '—É–≤–æ–ª–∏—Ç—å —Ç–µ–±—è', '–ø–ª–æ—Ö–æ–π –±–æ—Å', '–≥–æ–≤–Ω–æ –Ω–∞—á–∞–ª—å–Ω–∏–∫'
]

GOOD_WORDS = [
    '—Ö–æ—Ä–æ—à–∏–π', '–æ—Ç–ª–∏—á–Ω—ã–π', '–∫–ª–∞—Å—Å–Ω—ã–π', '–ª—É—á—à–∏–π', '–∫—Ä—É—Ç–æ–π –Ω–∞—á–∞–ª—å–Ω–∏–∫',
    '—Å–ø–∞—Å–∏–±–æ', '–±–ª–∞–≥–æ–¥–∞—Ä—é', '–º–æ–ª–æ–¥–µ—Ü', '—É–º–Ω–∏—Ü–∞', '–∫—Ä—É—Ç–æ–π –±–æ—Å'
]

RANDOM_PHRASES = [
    "–î–µ–≤–µ–ª–æ–ø–µ—Ä—ã, –∫–æ–¥–∏—Ç–µ? üíª",
    "–¢–µ—Å—Ç—ã –∫—Ç–æ –ø–∏—Å–∞—Ç—å –±—É–¥–µ—Ç? üß™",
    "–ú–æ–∂–µ—Ç —É–≤–æ–ª–∏—Ç—å –≤—Å–µ—Ö –∏ –Ω–∞–Ω—è—Ç—å –∏–Ω–¥—É—Å–æ–≤? ü§î",
    "–ì–¥–µ unit-—Ç–µ—Å—Ç—ã?! üìã",
    "–û–ø—è—Ç—å –≥–æ–≤–Ω–æ–∫–æ–¥ –ø–∏—à–µ—Ç–µ? üí©",
    "–î–µ–¥–ª–∞–π–Ω —á–µ—Ä–µ–∑ —á–∞—Å, –∞ —É –≤–∞—Å –±–∏–ª–¥ –Ω–µ —Å–æ–±–∏—Ä–∞–µ—Ç—Å—è! ‚è∞",
    "Code review –¥–µ–ª–∞–ª–∏ –≤–æ–æ–±—â–µ? üëÄ",
    "–í –ø—Ä–æ–¥ –±–µ–∑ —Ç–µ—Å—Ç–æ–≤ –Ω–µ –ø–æ–π–¥–µ—Ç! üö´",
    "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –æ–±–Ω–æ–≤–∏–ª–∏? üìö",
    "–¢–∞–∫-—Ç–∞–∫-—Ç–∞–∫... —á—Ç–æ —Ç—É—Ç —É –Ω–∞—Å? ü§î",
    "–°–∞–ª–∞–≥–∏, —Ä–∞–±–æ—Ç–∞–µ—Ç–µ? üò§",
    "InPizdec —Ç—Ä–µ–±—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤! üíº"
]

TEST_PHRASES = [
    "–ê –Ω—É-–∫–∞ —Ç–µ—Å—Ç—ã –¥–µ–ª–∞—Ç—å! üß™",
    "–ì–¥–µ –ø–æ–∫—Ä—ã—Ç–∏–µ —Ç–µ—Å—Ç–∞–º–∏?! üìä",
    "–ö–æ–≥–¥–∞ —Ç–µ—Å—Ç—ã –ø–æ–∫—Ä–æ—é—Ç –≤—Å—ë –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ? üéØ",
    "Unit-—Ç–µ—Å—Ç—ã –ø–∏—Å–∞–ª–∏? üîç",
    "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –≥–¥–µ? üîó"
]

CODE_PHRASES = [
    "–ì–æ–≤–Ω–æ–∫–æ–¥ –æ–ø—è—Ç—å –ø–∏—à–µ—Ç–µ? üí©",
    "Code review –ø—Ä–æ—à–ª–∏? üëÄ",
    "–†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–≥–¥–∞ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ? üîß",
    "–ö–æ—Å—Ç—ã–ª–∏ —É–±—Ä–∞–ª–∏? ü©º"
]

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class BossBot:
    def __init__(self):
        self.app = Application.builder().token(TELEGRAM_TOKEN).build()
        self.last_activity = {}  # –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —á–∞—Ç–æ–≤
        self.model = genai.GenerativeModel(
            AI_MODEL,
            system_instruction=AI_INSTRUCTIONS
        )
        self.setup_handlers()

    # ---------- –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ----------
    def post_process(self, text: str, user_name: str) -> str:
        """–ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –∏–º—è –∏ –æ–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã."""
        text = text.replace("–ò–ú–Ø", user_name).replace("{–ò–ú–Ø}", user_name)
        if len(text) > MAX_CHARS:
            text = text[:MAX_CHARS].rsplit(' ', 1)[0] + "‚Ä¶"
        return text

    # ---------- —Ö–µ–Ω–¥–ª–µ—Ä—ã ----------
    def setup_handlers(self):
        self.app.add_handler(CommandHandler("start", self.start_command))
        self.app.add_handler(CommandHandler("help", self.help_command))
        self.app.add_handler(CommandHandler("status", self.status_command))
        self.app.add_handler(CommandHandler("tests", self.tests_command))
        self.app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        self.app.add_handler(MessageHandler(filters.GAME, self.handle_games))

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_name = update.effective_user.first_name or "–°–æ—Ç—Ä—É–¥–Ω–∏–∫"
        await update.message.reply_text(
            f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {user_name}! üëî\n\n"
            f"–Ø –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ë–∞—Ä–∞—à–∫–∏–Ω, –≤–∞—à –Ω–∞—á–∞–ª—å–Ω–∏–∫ –æ—Ç–¥–µ–ª–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ü–û –∏–∑ –∫–æ–º–ø–∞–Ω–∏–∏ InPizdec.\n"
            f"–ù–∞–¥–µ—é—Å—å –Ω–∞ –ø–ª–æ–¥–æ—Ç–≤–æ—Ä–Ω—É—é —Ä–∞–±–æ—Ç—É –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–¥! üíª\n\n"
            f"–ü–æ–º–Ω–∏—Ç–µ: —Ç–µ—Å—Ç—ã ‚Äî —ç—Ç–æ —Å–≤—è—Ç–æ–µ! üß™"
        )

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        help_text = """
üëî **–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ë–∞—Ä–∞—à–∫–∏–Ω, –ù–∞—á–∞–ª—å–Ω–∏–∫ –æ—Ç–¥–µ–ª–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏**
–ö–æ–º–ø–∞–Ω–∏—è: InPizdec üíº

**–ü—Ä–∞–≤–∏–ª–∞:**
‚Ä¢ –ö–æ–¥–∏–º, –∞ –Ω–µ —Ä–∞–∑–≤–ª–µ–∫–∞–µ–º—Å—è! üíª
‚Ä¢ –¢–µ—Å—Ç—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã!
‚Ä¢ –ò–≥—Ä—ã –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è ‚Äî –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã
‚Ä¢ Code review –ø—Ä–æ—Ö–æ–¥–∏–º –≤—Å–µ–≥–¥–∞
‚Ä¢ –ì–æ–≤–Ω–æ–∫–æ–¥ –Ω–µ —Ç–æ–ª–µ—Ä–∏—Ä—É–µ–º

**–ö–æ–º–∞–Ω–¥—ã:**
/start - –ü—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å—Å—è
/status - –°—Ç–∞—Ç—É—Å –æ—Ç–¥–µ–ª–∞
/tests - –°—Ç–∞—Ç—É—Å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

*–ü–æ–º–Ω–∏—Ç–µ: —è —Å–ª–µ–∂—É –∑–∞ –ø–æ–∫—Ä—ã—Ç–∏–µ–º —Ç–µ—Å—Ç–∞–º–∏! üëÄ*
        """
        await update.message.reply_text(help_text, parse_mode='Markdown')

    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        status_messages = [
            "üìä –û—Ç–¥–µ–ª —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —à—Ç–∞—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ",
            "‚ö†Ô∏è –ó–∞–º–µ—Ç–∏–ª –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è –≤ –∫–æ–¥–µ...",
            "‚úÖ –î–µ–≤–µ–ª–æ–ø–µ—Ä—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —Ö–æ—Ä–æ—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã",
            "üî• –ì–æ—Ä—è—á–∞—è –ø–æ—Ä–∞! –í—Å–µ –Ω–∞ –∫–æ–¥–∏–Ω–≥!",
            "üò§ –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–∞–ª–∞–≥–∏ –æ–ø—è—Ç—å –≥–æ–≤–Ω–æ–∫–æ–¥ –ø–∏—à—É—Ç!",
            "üíª –ë–∏–ª–¥—ã —Å–æ–±–∏—Ä–∞—é—Ç—Å—è —Å—Ç–∞–±–∏–ª—å–Ω–æ",
            "üß™ –¢–µ—Å—Ç—ã –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∑–µ–ª–µ–Ω—ã–µ"
        ]
        await update.message.reply_text(
            f"**–°—Ç–∞—Ç—É—Å –æ—Ç–¥–µ–ª–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ InPizdec:**\n"
            f"{random.choice(status_messages)}\n\n"
            f"–ù–∞—á–∞–ª—å–Ω–∏–∫: –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ë–∞—Ä–∞—à–∫–∏–Ω üëî\n"
            f"–í—Ä–µ–º—è: {datetime.now().strftime('%H:%M, %d.%m.%Y')}"
        )

    async def tests_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        test_status = [
            "üìä –ü–æ–∫—Ä—ã—Ç–∏–µ —Ç–µ—Å—Ç–∞–º–∏: 73% (–Ω–∞–¥–æ –±–æ–ª—å—à–µ!)",
            "üî¥ Unit-—Ç–µ—Å—Ç—ã –ø–∞–¥–∞—é—Ç! –ò—Å–ø—Ä–∞–≤–ª—è–π—Ç–µ!",
            "üü° –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø–∏—à—É—Ç—Å—è...",
            "‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–µ–ª–µ–Ω—ã–µ! –ú–æ–ª–æ–¥—Ü—ã!",
            "üíÄ –¢–µ—Å—Ç–æ–≤ –Ω–µ—Ç –≤–æ–æ–±—â–µ! –£–∂–∞—Å!",
            "üß™ E2E —Ç–µ—Å—Ç—ã –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
            "‚ö†Ô∏è –¢–µ—Å—Ç—ã –µ—Å—Ç—å, –Ω–æ –æ–Ω–∏ –≤—Ä—É—Ç!",
            "üéØ –ü–æ–∫—Ä—ã—Ç–∏–µ —Ä–∞—Å—Ç–µ—Ç, –Ω–æ –º–µ–¥–ª–µ–Ω–Ω–æ",
            "üîß –¢–µ—Å—Ç—ã —Ä–µ—Ñ–∞–∫—Ç–æ—Ä—è—Ç—Å—è"
        ]
        await update.message.reply_text(
            f"**–°—Ç–∞—Ç—É—Å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è InPizdec:**\n"
            f"{random.choice(test_status)}\n\n"
            f"üíª **–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:** –ë–µ–∑ —Ç–µ—Å—Ç–æ–≤ –≤ –ø—Ä–æ–¥ –Ω–µ –ø–æ–π–¥–µ—Ç!\n"
            f"üéØ **–¶–µ–ª—å:** 100% –ø–æ–∫—Ä—ã—Ç–∏–µ –∫ –ø—è—Ç–Ω–∏—Ü–µ!"
        )

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            message = update.message.text.lower()
            user_name = update.effective_user.first_name or "–°–æ—Ç—Ä—É–¥–Ω–∏–∫"
            chat_id = update.effective_chat.id
            self.last_activity[chat_id] = datetime.now()

            response = await self.check_triggers(message, user_name)
            if response:
                await update.message.reply_text(response)
            else:
                ai_response = await self.get_ai_response(message, user_name)
                await update.message.reply_text(ai_response)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await update.message.reply_text("–ß—Ç–æ-—Ç–æ —è –Ω–µ –ø–æ–Ω—è–ª... –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –¥–æ–∫–ª–∞–¥! ü§î")

    async def handle_games(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_name = update.effective_user.first_name or "–°–æ—Ç—Ä—É–¥–Ω–∏–∫"
        angry_responses = [
            f"{user_name}! –ê –Ω—É –ø—Ä–µ–∫—Ä–∞—Ç–∏–ª–∏ –∏–≥—Ä–∞—Ç—å! –¢–µ—Å—Ç—ã –ø–∏—Å–∞—Ç—å –Ω–∞–¥–æ! üß™",
            f"–û–ø—è—Ç—å —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è, {user_name}?! üéÆ‚û°Ô∏èüíª",
            f"{user_name}, —è –∂–µ –≥–æ–≤–æ—Ä–∏–ª ‚Äî –Ω–∏–∫–∞–∫–∏—Ö –∏–≥—Ä! –ö–û–î–ò–¢–¨! üíª",
            f"–ü–æ–ª–µ —á—É–¥–µ—Å?! {user_name}, –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ —á—É–¥–æ –∑–¥–µ—Å—å ‚Äî —á—Ç–æ –±–∏–ª–¥ —Å–æ–±–∏—Ä–∞–µ—Ç—Å—è! ü§¶‚Äç‚ôÇÔ∏è",
            f"–ò–≥—Ä—ã –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è? {user_name}, –º–æ–∂–µ—Ç —Ç–µ–±–µ –≤ –≥–µ–π–º–¥–µ–≤ —É–π—Ç–∏? üò°",
            f"–í–º–µ—Å—Ç–æ –∫–∞–∑–∏–Ω–æ –ª—É—á—à–µ unit-—Ç–µ—Å—Ç—ã –ø–∏—Å–∞—Ç—å, {user_name}! üé∞‚û°Ô∏èüß™"
        ]
        await update.message.reply_text(random.choice(angry_responses))

    async def check_triggers(self, message: str, user_name: str) -> str:
        if any(trigger in message for trigger in GAME_TRIGGERS):
            responses = [
                f"{user_name}! –•–≤–∞—Ç–∏—Ç –∏–≥—Ä–∞—Ç—å! –¢–µ—Å—Ç—ã –ø–∏—Å–∞—Ç—å –Ω–∞–¥–æ! üß™",
                f"–ê –Ω—É-–∫–∞ —É–±—Ä–∞–ª–∏ –∏–≥—Ä—É—à–∫–∏, {user_name}! InPizdec –Ω–µ –≥–µ–π–º–¥–µ–≤! üíª",
                f"{user_name}, —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–æ—Å–ª–µ code review! –°–µ–π—á–∞—Å ‚Äî –±–∞–≥—Ñ–∏–∫—Å—ã! üêõ",
                f"–ò–≥—Ä—ã?! {user_name}, –º–æ–∂–µ—Ç —Ç–µ–±–µ –≤ QA –ø–µ—Ä–µ–≤–µ—Å—Ç–∏—Å—å? üò†",
                f"–ü–æ–∏–≥—Ä–∞—Ç—å —Ö–æ—á–µ—à—å? –í–æ—Ç —Ç–µ–±–µ unit-—Ç–µ—Å—Ç—ã ‚Äî –ø–æ–∏–≥—Ä–∞–π —Å –Ω–∏–º–∏! üéÆ‚û°Ô∏èüß™"
            ]
            return random.choice(responses)

        if any(trigger in message for trigger in IT_TRIGGERS):
            if '—Ç–µ—Å—Ç' in message or '–ø–æ–∫—Ä—ã—Ç–∏–µ' in message:
                return random.choice(TEST_PHRASES)
            elif '–∫–æ–¥' in message or '–±–∞–≥' in message:
                return random.choice(CODE_PHRASES)

        if any(bad_word in message for bad_word in BAD_WORDS):
            return f"{user_name} –£–í–û–õ–ï–ù! üî• (–ù–æ –∑–∞–≤—Ç—Ä–∞ –ø—Ä–∏—Ö–æ–¥–∏, –∫–æ–¥ —Å–∞–º —Å–µ–±—è –Ω–µ –Ω–∞–ø–∏—à–µ—Ç üòè)"

        if any(good_word in message for good_word in GOOD_WORDS):
            return f"{user_name} –ü–û–í–´–®–ï–ù! üìà –¢–µ–ø–µ—Ä—å —Ç—ã Senior Developer! üëè"

        return None

    async def get_ai_response(self, message: str, user_name: str) -> str:
        try:
            contextualized_message = f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ {user_name} –ø–∏—à–µ—Ç: {message}"
            response = self.model.generate_content(contextualized_message)
            return self.post_process(response.text.strip(), user_name)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ò–ò: {e}")
            fallback = [
                f"{user_name}, –Ω–µ –ø–æ–Ω—è–ª –≤–∞—à–µ–≥–æ –¥–æ–∫–ª–∞–¥–∞! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —á–µ—Ç—á–µ! ü§î",
                "–ì–æ–≤–æ—Ä–∏—Ç–µ —è—Å–Ω–µ–µ, —Å–æ—Ç—Ä—É–¥–Ω–∏–∫! üó£Ô∏è",
                "–ß—Ç–æ-—Ç–æ —è –æ—Ç–≤–ª–µ–∫—Å—è... –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –µ—â–µ —Ä–∞–∑! ‚òï",
                f"{user_name}, –∫–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∞ –≤—ã ‚Äî –Ω–µ—Ç? ü§®",
                "–ú–æ–∂–µ—Ç –±–∏–ª–¥ –ø–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å? –ê —Ç–æ –Ω–µ –ø–æ–Ω–∏–º–∞—é –Ω–∏—á–µ–≥–æ! üîÑ"
            ]
            return random.choice(fallback)

    # ---------- —Ñ–æ–Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è ----------
    async def random_boss_messages(self):
        while True:
            try:
                await asyncio.sleep(random.randint(1800, 3600))  # 30-60 –º–∏–Ω
                now = datetime.now()
                for chat_id, last_activity in self.last_activity.items():
                    if now - last_activity > timedelta(minutes=30):
                        try:
                            await self.app.bot.send_message(
                                chat_id=chat_id,
                                text=random.choice(RANDOM_PHRASES)
                            )
                        except Exception as e:
                            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç {chat_id}: {e}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ random_boss_messages: {e}")

    async def start_random_messages(self):
        asyncio.create_task(self.random_boss_messages())

    async def run_async(self):
        logger.info("–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ë–∞—Ä–∞—à–∫–∏–Ω –ø—Ä–∏—Å—Ç—É–ø–∞–µ—Ç –∫ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤—É –æ—Ç–¥–µ–ª–æ–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏! üëîüíª")
        asyncio.create_task(self.start_random_messages())
        async with self.app:
            await self.app.start()
            await self.app.updater.start_polling(allowed_updates=Update.ALL_TYPES)
            await asyncio.Event().wait()

    def run(self):
        asyncio.run(self.run_async())

if __name__ == '__main__':
    boss = BossBot()
    boss.run()
