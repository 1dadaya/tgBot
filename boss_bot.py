import logging
import asyncio
import random
from datetime import datetime, timedelta
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import openai
from config import *

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI
openai.api_key = OPENAI_API_KEY

class BossBot:
    def __init__(self):
        self.app = Application.builder().token(TELEGRAM_TOKEN).build()
        self.last_activity = {}  # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —á–∞—Ç–æ–≤
        self.setup_handlers()
        
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        # –ö–æ–º–∞–Ω–¥—ã
        self.app.add_handler(CommandHandler("start", self.start_command))
        self.app.add_handler(CommandHandler("help", self.help_command))
        self.app.add_handler(CommandHandler("status", self.status_command))
        self.app.add_handler(CommandHandler("tests", self.tests_command))  # –ù–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.app.add_handler(MessageHandler(
            filters.TEXT & ~filters.COMMAND, 
            self.handle_message
        ))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–≥—Ä –∏ —Å—Ç–∏–∫–µ—Ä–æ–≤
        self.app.add_handler(MessageHandler(
            filters.GAME, 
            self.handle_games
        ))
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        user_name = update.effective_user.first_name or "–°–æ—Ç—Ä—É–¥–Ω–∏–∫"
        await update.message.reply_text(
            f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {user_name}! üëî\n\n"
            f"–Ø –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ë–∞—Ä–∞—à–∫–∏–Ω, –≤–∞—à –Ω–∞—á–∞–ª—å–Ω–∏–∫ –æ—Ç–¥–µ–ª–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ü–û –∏–∑ –∫–æ–º–ø–∞–Ω–∏–∏ InPizdec.\n"
            f"–ù–∞–¥–µ—é—Å—å –Ω–∞ –ø–ª–æ–¥–æ—Ç–≤–æ—Ä–Ω—É—é —Ä–∞–±–æ—Ç—É –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–¥! üíª\n\n"
            f"–ü–æ–º–Ω–∏—Ç–µ: —Ç–µ—Å—Ç—ã ‚Äî —ç—Ç–æ —Å–≤—è—Ç–æ–µ! üß™"
        )
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /help"""
        help_text = """
üëî **–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ë–∞—Ä–∞—à–∫–∏–Ω, –ù–∞—á–∞–ª—å–Ω–∏–∫ –æ—Ç–¥–µ–ª–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏**
–ö–æ–º–ø–∞–Ω–∏—è: InPizdec üíº

**–ü—Ä–∞–≤–∏–ª–∞:**
‚Ä¢ –ö–æ–¥–∏–º, –∞ –Ω–µ —Ä–∞–∑–≤–ª–µ–∫–∞–µ–º—Å—è! üíª
‚Ä¢ –¢–µ—Å—Ç—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã!
‚Ä¢ –ò–≥—Ä—ã –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è ‚Äî –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã
‚Ä¢ Code review –ø—Ä–æ—Ö–æ–¥–∏–º –≤—Å–µ–≥–¥–∞
‚Ä¢ –ì–æ–≤–Ω–æ–∫–æ–¥ –Ω–µ —Ç–æ–ª–µ—Ä–∏—Ä—É–µ–º

**–ö–æ–º–∞–Ω–¥—ã:**
/start - –ü—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å—Å—è
/status - –°—Ç–∞—Ç—É—Å –æ—Ç–¥–µ–ª–∞
/tests - –°—Ç–∞—Ç—É—Å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

*–ü–æ–º–Ω–∏—Ç–µ: —è —Å–ª–µ–∂—É –∑–∞ –ø–æ–∫—Ä—ã—Ç–∏–µ–º —Ç–µ—Å—Ç–∞–º–∏! üëÄ*
        """
        await update.message.reply_text(help_text, parse_mode='Markdown')
    
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°—Ç–∞—Ç—É—Å –æ—Ç–¥–µ–ª–∞"""
        chat_id = update.effective_chat.id
        
        status_messages = [
            "üìä –û—Ç–¥–µ–ª —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —à—Ç–∞—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ",
            "‚ö†Ô∏è –ó–∞–º–µ—Ç–∏–ª –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è –≤ –∫–æ–¥–µ...",
            "‚úÖ –î–µ–≤–µ–ª–æ–ø–µ—Ä—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —Ö–æ—Ä–æ—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã",
            "üî• –ì–æ—Ä—è—á–∞—è –ø–æ—Ä–∞! –í—Å–µ –Ω–∞ –∫–æ–¥–∏–Ω–≥!",
            "üò§ –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–∞–ª–∞–≥–∏ –æ–ø—è—Ç—å –≥–æ–≤–Ω–æ–∫–æ–¥ –ø–∏—à—É—Ç!",
            "üíª –ë–∏–ª–¥—ã —Å–æ–±–∏—Ä–∞—é—Ç—Å—è —Å—Ç–∞–±–∏–ª—å–Ω–æ",
            "üß™ –¢–µ—Å—Ç—ã –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∑–µ–ª–µ–Ω—ã–µ"
        ]
        
        await update.message.reply_text(
            f"**–°—Ç–∞—Ç—É—Å –æ—Ç–¥–µ–ª–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ InPizdec:**\n"
            f"{random.choice(status_messages)}\n\n"
            f"–ù–∞—á–∞–ª—å–Ω–∏–∫: –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ë–∞—Ä–∞—à–∫–∏–Ω üëî\n"
            f"–í—Ä–µ–º—è: {datetime.now().strftime('%H:%M, %d.%m.%Y')}"
        )
    
    async def tests_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /tests - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ç–µ—Å—Ç–æ–≤"""
        test_status = [
            "üìä –ü–æ–∫—Ä—ã—Ç–∏–µ —Ç–µ—Å—Ç–∞–º–∏: 73% (–Ω–∞–¥–æ –±–æ–ª—å—à–µ!)",
            "üî¥ Unit-—Ç–µ—Å—Ç—ã –ø–∞–¥–∞—é—Ç! –ò—Å–ø—Ä–∞–≤–ª—è–π—Ç–µ!",
            "üü° –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø–∏—à—É—Ç—Å—è...",
            "‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–µ–ª–µ–Ω—ã–µ! –ú–æ–ª–æ–¥—Ü—ã!",
            "üíÄ –¢–µ—Å—Ç–æ–≤ –Ω–µ—Ç –≤–æ–æ–±—â–µ! –£–∂–∞—Å!",
            "üß™ E2E —Ç–µ—Å—Ç—ã –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
            "‚ö†Ô∏è –¢–µ—Å—Ç—ã –µ—Å—Ç—å, –Ω–æ –æ–Ω–∏ –≤—Ä—É—Ç!",
            "üéØ –ü–æ–∫—Ä—ã—Ç–∏–µ —Ä–∞—Å—Ç–µ—Ç, –Ω–æ –º–µ–¥–ª–µ–Ω–Ω–æ",
            "üîß –¢–µ—Å—Ç—ã —Ä–µ—Ñ–∞–∫—Ç–æ—Ä—è—Ç—Å—è"
        ]
        
        await update.message.reply_text(
            f"**–°—Ç–∞—Ç—É—Å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è InPizdec:**\n"
            f"{random.choice(test_status)}\n\n"
            f"üíª **–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:** –ë–µ–∑ —Ç–µ—Å—Ç–æ–≤ –≤ –ø—Ä–æ–¥ –Ω–µ –ø–æ–π–¥–µ—Ç!\n"
            f"üéØ **–¶–µ–ª—å:** 100% –ø–æ–∫—Ä—ã—Ç–∏–µ –∫ –ø—è—Ç–Ω–∏—Ü–µ!"
        )
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            message = update.message.text.lower()
            user_name = update.effective_user.first_name or "–°–æ—Ç—Ä—É–¥–Ω–∏–∫"
            chat_id = update.effective_chat.id
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            self.last_activity[chat_id] = datetime.now()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∏–≥–≥–µ—Ä—ã
            response = await self.check_triggers(message, user_name)
            
            if response:
                await update.message.reply_text(response)
            else:
                # –û–±—ã—á–Ω—ã–π –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ –ò–ò
                ai_response = await self.get_ai_response(message, user_name)
                await update.message.reply_text(ai_response)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await update.message.reply_text("–ß—Ç–æ-—Ç–æ —è –Ω–µ –ø–æ–Ω—è–ª... –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –¥–æ–∫–ª–∞–¥! ü§î")
    
    async def handle_games(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–≥—Ä"""
        user_name = update.effective_user.first_name or "–°–æ—Ç—Ä—É–¥–Ω–∏–∫"
        
        angry_responses = [
            f"{user_name}! –ê –Ω—É –ø—Ä–µ–∫—Ä–∞—Ç–∏–ª–∏ –∏–≥—Ä–∞—Ç—å! –¢–µ—Å—Ç—ã –ø–∏—Å–∞—Ç—å –Ω–∞–¥–æ! üß™",
            f"–û–ø—è—Ç—å —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è, {user_name}?! üéÆ‚û°Ô∏èüíª",
            f"{user_name}, —è –∂–µ –≥–æ–≤–æ—Ä–∏–ª ‚Äî –Ω–∏–∫–∞–∫–∏—Ö –∏–≥—Ä! –ö–û–î–ò–¢–¨! üíª",
            f"–ü–æ–ª–µ —á—É–¥–µ—Å?! {user_name}, –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ —á—É–¥–æ –∑–¥–µ—Å—å ‚Äî —á—Ç–æ –±–∏–ª–¥ —Å–æ–±–∏—Ä–∞–µ—Ç—Å—è! ü§¶‚Äç‚ôÇÔ∏è",
            f"–ò–≥—Ä—ã –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è? {user_name}, –º–æ–∂–µ—Ç —Ç–µ–±–µ –≤ –≥–µ–π–º–¥–µ–≤ —É–π—Ç–∏? üò°",
            f"–í–º–µ—Å—Ç–æ –∫–∞–∑–∏–Ω–æ –ª—É—á—à–µ unit-—Ç–µ—Å—Ç—ã –ø–∏—Å–∞—Ç—å, {user_name}! üé∞‚û°Ô∏èüß™"
        ]
        
        await update.message.reply_text(random.choice(angry_responses))
    
    async def check_triggers(self, message: str, user_name: str) -> str:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç—Ä–∏–≥–≥–µ—Ä–Ω—ã–µ —Å–ª–æ–≤–∞"""
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏–≥—Ä–æ–≤—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã
        if any(trigger in message for trigger in GAME_TRIGGERS):
            responses = [
                f"{user_name}! –•–≤–∞—Ç–∏—Ç –∏–≥—Ä–∞—Ç—å! –¢–µ—Å—Ç—ã –ø–∏—Å–∞—Ç—å –Ω–∞–¥–æ! üß™",
                f"–ê –Ω—É-–∫–∞ —É–±—Ä–∞–ª–∏ –∏–≥—Ä—É—à–∫–∏, {user_name}! InPizdec –Ω–µ –≥–µ–π–º–¥–µ–≤! üíª",
                f"{user_name}, —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–æ—Å–ª–µ code review! –°–µ–π—á–∞—Å ‚Äî –±–∞–≥—Ñ–∏–∫—Å—ã! üêõ",
                f"–ò–≥—Ä—ã?! {user_name}, –º–æ–∂–µ—Ç —Ç–µ–±–µ –≤ QA –ø–µ—Ä–µ–≤–µ—Å—Ç–∏—Å—å? üò†",
                f"–ü–æ–∏–≥—Ä–∞—Ç—å —Ö–æ—á–µ—à—å? –í–æ—Ç —Ç–µ–±–µ unit-—Ç–µ—Å—Ç—ã ‚Äî –ø–æ–∏–≥—Ä–∞–π —Å –Ω–∏–º–∏! üéÆ‚û°Ô∏èüß™"
            ]
            return random.choice(responses)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ IT-—Ç—Ä–∏–≥–≥–µ—Ä—ã (—Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ –∫–æ–¥/—Ç–µ—Å—Ç—ã)
        if any(trigger in message for trigger in IT_TRIGGERS):
            if '—Ç–µ—Å—Ç' in message or '–ø–æ–∫—Ä—ã—Ç–∏–µ' in message:
                return random.choice(TEST_PHRASES)
            elif '–∫–æ–¥' in message or '–±–∞–≥' in message:
                return random.choice(CODE_PHRASES)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–ª–æ—Ö–∏–µ —Å–ª–æ–≤–∞
        if any(bad_word in message for bad_word in BAD_WORDS):
            return f"{user_name} –£–í–û–õ–ï–ù! üî• (–ù–æ –∑–∞–≤—Ç—Ä–∞ –ø—Ä–∏—Ö–æ–¥–∏, –∫–æ–¥ —Å–∞–º —Å–µ–±—è –Ω–µ –Ω–∞–ø–∏—à–µ—Ç üòè)"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ö–æ—Ä–æ—à–∏–µ —Å–ª–æ–≤–∞
        if any(good_word in message for good_word in GOOD_WORDS):
            return f"{user_name} –ü–û–í–´–®–ï–ù! üìà –¢–µ–ø–µ—Ä—å —Ç—ã Senior Developer! üëè"
        
        return None
    
    async def get_ai_response(self, message: str, user_name: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ò–ò"""
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –∏–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            contextualized_message = f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ {user_name} –ø–∏—à–µ—Ç: {message}"
            
            response = openai.ChatCompletion.create(
                model=AI_MODEL,
                messages=[
                    {"role": "system", "content": AI_INSTRUCTIONS},
                    {"role": "user", "content": contextualized_message}
                ],
                max_tokens=300,
                temperature=0.8
            )
            return response.choices[0].message.content.strip()
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ò–ò: {e}")
            boss_responses = [
                f"{user_name}, –Ω–µ –ø–æ–Ω—è–ª –≤–∞—à–µ–≥–æ –¥–æ–∫–ª–∞–¥–∞! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —á–µ—Ç—á–µ! ü§î",
                "–ì–æ–≤–æ—Ä–∏—Ç–µ —è—Å–Ω–µ–µ, —Å–æ—Ç—Ä—É–¥–Ω–∏–∫! üó£Ô∏è",
                "–ß—Ç–æ-—Ç–æ —è –æ—Ç–≤–ª–µ–∫—Å—è... –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –µ—â–µ —Ä–∞–∑! ‚òï",
                f"{user_name}, –∫–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∞ –≤—ã ‚Äî –Ω–µ—Ç? ü§®",
                "–ú–æ–∂–µ—Ç –±–∏–ª–¥ –ø–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å? –ê —Ç–æ –Ω–µ –ø–æ–Ω–∏–º–∞—é –Ω–∏—á–µ–≥–æ! üîÑ"
            ]
            return random.choice(boss_responses)
    
    async def random_boss_messages(self):
        """–°–ª—É—á–∞–π–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞—á–∞–ª—å–Ω–∏–∫–∞"""
        while True:
            try:
                await asyncio.sleep(random.randint(1800, 3600))  # 30-60 –º–∏–Ω—É—Ç
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —á–∞—Ç—ã –Ω–∞ –±–µ–∑–¥–µ–π—Å—Ç–≤–∏–µ
                current_time = datetime.now()
                for chat_id, last_activity in self.last_activity.items():
                    if current_time - last_activity > timedelta(minutes=30):
                        try:
                            await self.app.bot.send_message(
                                chat_id=chat_id,
                                text=random.choice(RANDOM_PHRASES)
                            )
                        except Exception as e:
                            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç {chat_id}: {e}")
                            
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ random_boss_messages: {e}")
    
    async def start_random_messages(self):
        """–ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        asyncio.create_task(self.random_boss_messages())
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ë–∞—Ä–∞—à–∫–∏–Ω –ø—Ä–∏—Å—Ç—É–ø–∞–µ—Ç –∫ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤—É –æ—Ç–¥–µ–ª–æ–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏! üëîüíª")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
        asyncio.create_task(self.start_random_messages())
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        self.app.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    boss = BossBot()
    boss.run()
